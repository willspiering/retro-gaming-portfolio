---
// src/components/ThemeSwitcher.astro
import { themes } from '../themes';
---


<div class="theme-switcher">
  <button id="theme-switcher-button" class="theme-switcher-button pixel-button">
    Change Theme
  </button>
  <div id="theme-modal" class="theme-modal">
    <div class="theme-modal-content">
      <div class="modal-header">
        <h2>Choose a Theme</h2>
        <button id="close-modal-x" class="close-modal-x pixel-button" aria-label="Close">×</button>
      </div>
      <div class="theme-grid">
        {themes.map((theme) => (
          <button class="theme-card" data-theme={theme.name}>
            <div class="theme-preview" style={`
              --preview-bg: ${theme.colors.bgColor};
              --preview-text: ${theme.colors.textColor};
              --preview-highlight: ${theme.colors.highlightColor};
              --preview-secondary: ${theme.colors.secondaryColor};
            `}>
              <div class="preview-header"></div>
              <div class="preview-content">
                <div class="preview-title"></div>
                <div class="preview-text"></div>
              </div>
            </div>
            <span class="theme-name">{theme.displayName}</span>
          </button>
        ))}
      </div>
      <div class="modal-footer">
        <button id="close-modal" class="close-modal pixel-button">Close</button>
      </div>
    </div>
  </div>
</div>

<style>
  .theme-switcher-button {
    font-family: 'Press Start 2P', cursive;
    font-size: 0.8em;
    padding: 10px 15px;
    background-color: var(--highlight-color);
    color: var(--bg-color);
    border: none;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }

  .theme-switcher-button:hover {
    background-color: var(--secondary-color);
  }

  .theme-modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    overflow: auto;
  }

  .theme-modal-content {
    background-color: var(--bg-color);
    margin: 5% auto;
    border: 4px solid var(--border-color);
    width: 90%;
    max-width: 800px;
    display: flex;
    flex-direction: column;
  }

  .modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 20px;
    border-bottom: 4px solid var(--border-color);
  }

  h2 {
    font-family: 'Press Start 2P', cursive;
    font-size: 1.2em;
    color: var(--highlight-color);
    margin: 0;
  }

  .close-modal-x {
    font-size: 1.5em;
    width: 40px;
    height: 40px;
    padding: 0;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .theme-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
    gap: 15px;
    padding: 20px;
    max-height: 60vh;
    overflow-y: auto;
  }

  .theme-card {
    background: none;
    border: none;
    cursor: pointer;
    text-align: center;
    transition: all 0.2s ease;
    padding: 10px;
    border: 2px solid transparent;
    position: relative;
    border-radius: 8px;
  }

  .theme-card:hover, .theme-card:focus {
    background-color: var(--secondary-color);
    outline: none;
  }

  .theme-preview {
    width: 100%;
    height: 80px;
    border-radius: 8px;
    overflow: hidden;
    background-color: var(--preview-bg);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    border: 2px solid var(--border-color);
    transition: all 0.2s ease;
  }

  .theme-card.active {
    background-color: var(--secondary-color);
  }

  .theme-card.active .theme-preview {
    border-color: var(--highlight-color);
    box-shadow: 0 0 0 2px var(--highlight-color), 0 0 10px rgba(0, 0, 0, 0.3);
  }

  .theme-card.active::after {
    content: '✓';
    position: absolute;
    top: 5px;
    right: 5px;
    background-color: var(--highlight-color);
    color: var(--bg-color);
    width: 24px;
    height: 24px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 16px;
    font-weight: bold;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
    border: 2px solid var(--bg-color);
  }

  .theme-name {
    display: block;
    margin-top: 8px;
    font-family: 'Press Start 2P', cursive;
    font-size: 0.7em;
    color: var(--text-color);
    line-height: 1.4;
  }

  .preview-header {
    height: 20px;
    background-color: var(--preview-highlight);
  }

  .preview-content {
    padding: 8px;
  }

  .preview-title {
    height: 10px;
    width: 80%;
    background-color: var(--preview-secondary);
    margin-bottom: 8px;
  }

  .preview-text {
    height: 6px;
    width: 100%;
    background-color: var(--preview-text);
    margin-bottom: 4px;
  }

  .preview-text:last-child {
    width: 60%;
  }

  .theme-name {
    display: block;
    margin-top: 8px;
    font-family: 'Press Start 2P', cursive;
    font-size: 0.7em;
    color: var(--text-color);
    line-height: 1.4;
  }

  .modal-footer {
    padding: 20px;
    border-top: 4px solid var(--border-color);
    text-align: center;
  }

  .pixel-button {
    font-family: 'Press Start 2P', cursive;
    font-size: 0.8em;
    padding: 10px 15px;
    background-color: var(--accent-color);
    color: var(--bg-color);
    border: none;
    cursor: pointer;
  }

  .pixel-button:hover, .pixel-button:focus {
    background-color: var(--highlight-color);
    outline: none;
  }

  /* Responsive styles for small screens */
  @media (max-width: 768px) {
    .theme-modal-content {
      margin: 0;
      width: 100%;
      height: 100%;
      border: none;
    }

    .modal-header {
      position: sticky;
      top: 0;
      background-color: var(--bg-color);
      z-index: 1;
    }

    .theme-grid {
      flex-grow: 1;
      max-height: none;
    }

    .modal-footer {
      position: sticky;
      bottom: 0;
      background-color: var(--bg-color);
      z-index: 1;
    }
  }
</style>

<script>
  import { getThemeByName } from '../themes';

  const themeButton = document.getElementById('theme-switcher-button');
  const themeModal = document.getElementById('theme-modal');
  const closeModal = document.getElementById('close-modal');
  const closeModalX = document.getElementById('close-modal-x');
  const themeCards = document.querySelectorAll('.theme-card');
  const themeGrid = document.querySelector('.theme-grid');

  // Function to apply theme
  function applyTheme(themeName: string) {
    const theme = getThemeByName(themeName);
    if (theme) {
      Object.entries(theme.colors).forEach(([key, value]) => {
        document.documentElement.style.setProperty(`--${key}`, value);
      });
      document.body.className = themeName;
      localStorage.setItem('selectedTheme', themeName);
      updateActiveTheme(themeName);
    }
  }

  // Function to update active theme indicator
  function updateActiveTheme(themeName: string) {
    themeCards.forEach((card) => {
      if (card instanceof HTMLElement) {
        if (card.dataset.theme === themeName) {
          card.classList.add('active');
        } else {
          card.classList.remove('active');
        }
      }
    });
  }

  // Function to open modal
  function openThemeModal() {
    themeModal?.style.setProperty('display', 'block');
    document.body.style.overflow = 'hidden';
    if (themeGrid) {
      themeGrid.scrollTop = 0;
    }
  }

  // Function to close modal
  function closeThemeModal() {
    themeModal?.style.setProperty('display', 'none');
    document.body.style.overflow = '';
  }

  // Set initial theme
  const savedTheme = localStorage.getItem('selectedTheme') || 'retroComputer';
  applyTheme(savedTheme);

  themeButton?.addEventListener('click', openThemeModal);

  closeModal?.addEventListener('click', closeThemeModal);
  closeModalX?.addEventListener('click', closeThemeModal);

  themeCards.forEach((card) => {
    if (card instanceof HTMLElement) {
      card.addEventListener('click', (e) => {
        const selectedTheme = card.dataset.theme;
        if (selectedTheme) {
          applyTheme(selectedTheme);
          closeThemeModal();
        }
      });
    }
  });

  // Close the modal if clicking outside of it
  window.addEventListener('click', (e) => {
    if (e.target === themeModal) {
      closeThemeModal();
    }
  });
</script>