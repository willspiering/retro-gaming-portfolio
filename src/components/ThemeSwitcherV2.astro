---
import { allThemes } from "../themes/index";

const themes = Object.entries(allThemes);
export interface Props {
  buttonText?: string;
}

const { buttonText } = Astro.props;
---

{
  buttonText && (
    <button
      class="btn btn-primary theme-switcher-button"
      onclick="theme_modal.showModal()"
    >
      {buttonText}
    </button>
  )
}

<dialog id="theme_modal" class="modal">
  <div class="modal-box w-11/12 max-w-5xl">
    <form method="dialog">
      <button class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2"
        >âœ•</button
      >
    </form>
    <h3 class="font-bold text-lg mb-4">Choose a Theme</h3>
    <div
      class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4"
    >
      {
        themes.map(([themeName, theme]) => (
          <button
            class="theme-card p-2 border-4 border-base-content rounded-lg hover:border-primary focus:border-primary transition-colors duration-200"
            data-theme={themeName}
          >
            <div class="w-full aspect-video bg-base-100 rounded-sm overflow-hidden">
              <div class="h-1/4 bg-primary" />
              <div class="p-2">
                <div class="h-2 w-3/4 bg-secondary mb-1" />
                <div class="h-2 w-full bg-accent mb-1" />
                <div class="h-2 w-1/2 bg-neutral" />
              </div>
            </div>
            <span class="block mt-2 text-xs font-semibold truncate">
              {themeName}
            </span>
          </button>
        ))
      }
    </div>
  </div>
  <form method="dialog" class="modal-backdrop">
    <button>close</button>
  </form>
</dialog>

<script>
  function initializeThemeSwitcher() {
    const themeCards = document.querySelectorAll(".theme-card");
    let modal = document.getElementById("theme_modal");

    function updateActiveTheme() {
      const activeTheme =
        localStorage.getItem("theme") ||
        document.documentElement.getAttribute("data-theme");
      themeCards.forEach((card) => {
        if (card instanceof HTMLElement) {
          if (card.getAttribute("data-theme") === activeTheme) {
            card.classList.add("border-primary");
          } else {
            card.classList.remove("border-primary");
          }
        }
      });
    }

    function moveModalToBodyEnd() {
      if (modal && !document.body.contains(modal)) {
        document.body.appendChild(modal);
      }
    }

    function toggleModalOpen(isOpen) {
      if (modal) {
        if (isOpen) {
          modal.classList.add("modal-open");
        } else {
          modal.classList.remove("modal-open");
        }
      }
    }

    function showModal() {
      if (modal instanceof HTMLDialogElement) {
        modal.showModal();
        toggleModalOpen(true);
      }
    }

    function closeModal() {
      if (modal instanceof HTMLDialogElement) {
        modal.close();
        toggleModalOpen(false);
      }
    }

    themeCards.forEach((card) => {
      card.addEventListener("click", () => {
        const selectedTheme = card.getAttribute("data-theme");
        if (selectedTheme) {
          document.documentElement.setAttribute("data-theme", selectedTheme);
          localStorage.setItem("theme", selectedTheme);
          updateActiveTheme();
          closeModal();
        }
      });
    });

    const themeSwitcherButtons = document.querySelectorAll(
      ".theme-switcher-button"
    );
    themeSwitcherButtons.forEach((button) => {
      button.addEventListener("click", showModal);
    });

    if (modal instanceof HTMLDialogElement) {
      modal.addEventListener("close", () => toggleModalOpen(false));
    }

    window.addEventListener("storage", (event) => {
      if (event.key === "theme") {
        updateActiveTheme();
      }
    });

    // Move modal to body end and update active theme
    moveModalToBodyEnd();
    updateActiveTheme();
  }

  // Run the initialization function when the DOM is fully loaded
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initializeThemeSwitcher);
  } else {
    initializeThemeSwitcher();
  }
</script>
