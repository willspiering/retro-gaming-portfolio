---
import { themes } from '../themes';
import MobileMenuButton from '../components/MobileMenuButton.astro';
import { initializeBackground } from '../utils/pixelatedBackground';

export interface Props {
  title: string;
}

const { title } = Astro.props;
---
<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
		<link href="https://fonts.googleapis.com/css2?family=Press+Start+2P&family=Roboto:wght@400;700&display=swap" rel="stylesheet">
	</head>
	<body>
		<div class="page-wrapper">
			<div class="page-container pixel-border">
				<aside class="sidebar">
					<button id="close-sidebar" class="close-sidebar pixel-border">Ã—</button>
					<!-- Sidebar content will be added here later -->
				</aside>
				<div class="content-divider"></div>
				<main class="main-content">
					<slot />
				</main>
			</div>
		</div>
		<MobileMenuButton />
	</body>
</html>

<style is:global define:vars={themes[0].colors}>
  :root {
    --bg-color: var(--bgColor);
    --text-color: var(--textColor);
    --border-color: var(--borderColor);
    --header-bg: var(--headerBg);
    --card-bg: var(--cardBg);
    --highlight-color: var(--highlightColor);
    --secondary-color: var(--secondaryColor);
    --accent-color: var(--accentColor);
    --muted-color: var(--mutedColor);
    --link-color: var(--linkColor);
    --link-hover-color: var(--linkHoverColor);
    --sidebar-bg: color-mix(in srgb, var(--card-bg) 85%, var(--border-color) 15%);
  }

  html, body {
    height: 100%;
    margin: 0;
    padding: 0;
  }

  body {
    font-family: 'Roboto', sans-serif;
    line-height: 1.6;
    color: var(--text-color);
    background-color: var(--bg-color);
    display: flex;
    flex-direction: column;
    min-height: 100vh;
  }

  h1, h2, h3, h4 {
    font-family: 'Press Start 2P', cursive;
    font-weight: normal;
    text-transform: uppercase;
    letter-spacing: 1px;
  }

  .page-wrapper {
    flex: 1;
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 20px;
    box-sizing: border-box;
  }

  .page-container {
    display: flex;
    max-width: 1200px;
    width: 95%;
    height: 90vh;
    margin: auto;
    background-color: var(--card-bg);
    position: relative;
  }

  .pixel-border {
    border: 4px solid var(--border-color);
    box-shadow: 
      0 0 0 4px var(--bg-color),
      0 0 0 8px var(--border-color),
      0 10px 20px rgba(0, 0, 0, 0.3),
      0 20px 40px rgba(0, 0, 0, 0.2);
  }

  @media (min-width: 769px) {
    .pixel-border {
      box-shadow: 
        0 0 0 4px var(--bg-color),
        0 0 0 8px var(--border-color),
        0 10px 20px rgba(0, 0, 0, 0.3),
        0 20px 40px rgba(0, 0, 0, 0.2),
        0 0 100px rgba(0, 0, 0, 0.1); /* Extended glow effect */
    }
  }

  .sidebar {
    flex: 0 0 300px;
    padding: 20px;
    overflow-y: auto;
    background-color: var(--sidebar-bg);
    position: relative;
  }

  .content-divider {
    width: 4px;
    background: repeating-linear-gradient(
      to bottom,
      var(--border-color),
      var(--border-color) 4px,
      transparent 4px,
      transparent 8px
    );
    z-index: 1;
  }

  .main-content {
    flex: 1;
    padding: 20px;
    overflow-y: auto;
  }

  .close-sidebar {
    position: absolute;
    top: 10px;
    right: 10px;
    background-color: var(--highlight-color);
    color: var(--bg-color);
    border: none;
    width: 40px;
    height: 40px;
    font-size: 24px;
    line-height: 1;
    cursor: pointer;
    z-index: 1001;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  @media (max-width: 768px) {
    body {
      display: block;
      overflow-x: hidden;
    }

    .page-wrapper {
      padding: 0;
      height: auto;
      min-height: 100vh;
    }

    .page-container {
      width: 100%;
      height: auto;
      min-height: 100vh;
      margin: 0;
      border: none;
      box-shadow: none;
    }

    .sidebar {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      max-width: 100%;
      max-height: 100vh;
      z-index: 1000;
      transform: translateX(-100%);
      transition: transform 0.3s ease-in-out;
      padding-top: 60px;
      box-sizing: border-box;
    }

    body.sidebar-open .sidebar {
      transform: translateX(0);
    }

    .content-divider {
      display: none;
    }

    .main-content {
      width: 100%;
      min-height: 100vh;
      overflow-y: visible;
      padding: 20px 10px 80px; /* Adjusted padding */
      box-sizing: border-box;
    }

    .close-sidebar {
      display: flex;
      top: 10px;
      right: 10px;
    }
  }

  @media (min-width: 769px) {
    .sidebar {
      transition: none;
    }

    .close-sidebar {
      display: none;
    }
  }

  .resize-transition-stopper * {
    transition: none !important;
  }
</style>

<script>
    import { getThemeByName } from '../themes';
    import { applyPixelatedBackground, initializeBackground } from '../utils/pixelatedBackground';
  
    function applyTheme(themeName: string): void {
      const theme = getThemeByName(themeName);
      Object.entries(theme.colors).forEach(([key, value]) => {
        document.documentElement.style.setProperty(`--${key}`, value);
      });
      applyPixelatedBackground(theme);
    }
  
    // Apply theme on load
    const savedTheme = localStorage.getItem('selectedTheme') || 'retroComputer';
    applyTheme(savedTheme);
  
    // Listen for theme change events
    document.addEventListener('themeChange', (e: Event) => {
      const customEvent = e as CustomEvent<{ theme: string }>;
      const newTheme = customEvent.detail.theme;
      applyTheme(newTheme);
      localStorage.setItem('selectedTheme', newTheme);
    });
  
    // Initialize the pixelated background
    initializeBackground();
  
    // Mobile menu functionality
    const closeSidebarButton = document.getElementById('close-sidebar');
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    
    closeSidebarButton?.addEventListener('click', () => {
      document.body.classList.remove('sidebar-open');
      mobileMenuButton?.classList.remove('open');
      const menuText = mobileMenuButton?.querySelector('.menu-text');
      if (menuText) {
        menuText.textContent = 'Menu';
      }
    });
  
    // Prevent transition on resize
    let resizeTimer;
    window.addEventListener('resize', () => {
      document.body.classList.add('resize-transition-stopper');
      clearTimeout(resizeTimer);
      resizeTimer = setTimeout(() => {
        document.body.classList.remove('resize-transition-stopper');
      }, 400);
    });
  </script>