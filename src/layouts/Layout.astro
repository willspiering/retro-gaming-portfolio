---
import { themes } from '../themes';

export interface Props {
  title: string;
}

const { title } = Astro.props;
---
<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
		<link href="https://fonts.googleapis.com/css2?family=Press+Start+2P&family=Roboto:wght@400;700&display=swap" rel="stylesheet">
	</head>
	<body>
		<div class="page-container pixel-border">
			<aside class="sidebar">
				<!-- Sidebar content will be added here later -->
			</aside>
			<div class="content-divider"></div>
			<main class="main-content">
				<slot />
			</main>
		</div>
	</body>
</html>

<style is:global define:vars={themes[0].colors}>
	:root {
		--bg-color: var(--bgColor);
		--text-color: var(--textColor);
		--border-color: var(--borderColor);
		--header-bg: var(--headerBg);
		--card-bg: var(--cardBg);
		--highlight-color: var(--highlightColor);
		--secondary-color: var(--secondaryColor);
		--accent-color: var(--accentColor);
		--muted-color: var(--mutedColor);
		--link-color: var(--linkColor);
		--link-hover-color: var(--linkHoverColor);
		--sidebar-bg: color-mix(in srgb, var(--card-bg) 85%, var(--border-color) 15%);
	}

	html, body {
		height: 100%;
		margin: 0;
		padding: 0;
		overflow: hidden;
	}

	body {
		font-family: 'Roboto', sans-serif;
		line-height: 1.6;
		color: var(--text-color);
		background-color: var(--bg-color);
		display: flex;
		justify-content: center;
		align-items: center;
	}

	h1, h2, h3, h4 {
		font-family: 'Press Start 2P', cursive;
		font-weight: normal;
		text-transform: uppercase;
		letter-spacing: 1px;
	}

	.pixel-border {
		border: 4px solid var(--border-color);
		box-shadow: 0 0 0 4px var(--bg-color), 0 0 0 8px var(--border-color);
	}

	.page-container {
		display: flex;
		max-width: 1200px;
		width: 95%;
		height: 90vh;
		margin: auto;
		background-color: var(--card-bg);
		position: relative;
	}

	.sidebar {
		flex: 0 0 300px;
		padding: 20px;
		overflow-y: auto;
		background-color: var(--sidebar-bg);
	}

	.content-divider {
		width: 4px;
		background: repeating-linear-gradient(
			to bottom,
			var(--border-color),
			var(--border-color) 4px,
			transparent 4px,
			transparent 8px
		);
		z-index: 1;
	}

	.main-content {
		flex: 1;
		padding: 20px;
		overflow-y: auto;
	}

	@media (max-width: 1024px) {
		.page-container {
			width: 100%;
			height: 100%;
			border: none;
			box-shadow: none;
		}

		body {
			padding: 0;
		}

		.pixel-border {
			border: none;
			box-shadow: none;
		}
	}

	@media (max-width: 768px) {
		.page-container {
			flex-direction: column;
		}

		.sidebar {
			flex: none;
			width: 100%;
			max-height: 30vh;
		}

		.content-divider {
			width: 100%;
			height: 4px;
			background: repeating-linear-gradient(
				to right,
				var(--border-color),
				var(--border-color) 4px,
				transparent 4px,
				transparent 8px
			);
		}

		.main-content {
			width: 100%;
		}
	}
</style>

<script>
	import { getThemeByName } from '../themes';

	function applyTheme(themeName: string) {
		const theme = getThemeByName(themeName);
		Object.entries(theme.colors).forEach(([key, value]) => {
			document.documentElement.style.setProperty(`--${key}`, value);
		});
	}

	// Apply theme on load
	const savedTheme = localStorage.getItem('selectedTheme') || 'retroComputer';
	applyTheme(savedTheme);

	// Listen for theme change events
	document.addEventListener('themeChange', (e: Event) => {
		const customEvent = e as CustomEvent;
		const newTheme = customEvent.detail.theme;
		applyTheme(newTheme);
		localStorage.setItem('selectedTheme', newTheme);
	});
</script>